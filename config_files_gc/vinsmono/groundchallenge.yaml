%YAML:1.0

#common parameters
imu_topic: "/camera/imu"
image_topic: "/camera/color/image_raw"
output_path: "/home/car/Downloads/project/vinsmono_ws/src/VINS-Mono/traj/mono_initest/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
distortion_parameters:
   k1: 1.4865749308203452e-01
   k2: -4.6815685578576460e-01
   p1: 1.6205585303208318e-03
   p2: -8.9101576735577930e-03
projection_parameters:
   fx: 6.2097277909374247e+02
   fy: 6.2212293397677581e+02
   cx: 3.1175896455154810e+02
   cy: 2.4718077836114819e+02


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
# extrinsicRotation: !!opencv-matrix
#    rows: 3
#    cols: 3
#    dt: d
#    data: [ 0.99964659 ,-0.01617333 , 0.0210979,
#            0.01635721,  0.99982947, -0.00857216, 
#            -0.02095566,  0.00891423,  0.99974066]
#idc cam to imu
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.99957087, -0.00192891 ,-0.02922921 ,
           0.00215313  ,0.99996848 , 0.00764156  ,
           0.02921355, -0.00770122 , 0.99954353      ]
#Translation from camera frame to imu frame, imu^T_cam
# extrinsicTranslation: !!opencv-matrix
#    rows: 3
#    cols: 1
#    dt: d
#    data: [-0.02323286, -0.01953139, 0.01917997]

#idc
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.03575085, 0.0044559 , -0.03269785]

#feature traker paprameters
max_cnt: 200            # max feature number in feature tracking
min_dist: 15            # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 0             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
# acc_n: 2.67809809884e-04     # accelerometer measurement noise standard deviation. #0.2   0.04
# gyr_n: 1.02960602817e-05        # gyroscope measurement noise standard deviation.     #0.05  0.004
# acc_w: 2.49999993684e-05         # accelerometer bias random work noise standard deviation.  #0.002
# gyr_w: 2.49999999369e-07         # gyroscope bias random work noise standard deviation.     #4.0e-5
# g_norm: 9.805       # gravity magnitude


#first time full log
# acc_n: 0.02 #2.9840535876578939e-02          # accelerometer measurement noise standard deviation. #0.2
# gyr_n: 0.005 #4.8602774318549456e-03         # gyroscope measurement noise standard deviation.     #0.05
# acc_w: 0.01 #9.2450042830019173e-03        # accelerometer bias random work noise standard deviation.  #0.02
# gyr_w: 3.0e-5 #3.0172667291423203e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
# g_norm: 9.805         # gravity magnitude

#m2dgr
# gyr_n: 2.4710787075320089e-03
# gyr_w: 1.7963145905200798e-05
# acc_n: 2.6848761610624401e-02
# acc_w: 8.5216274964016023e-04

#test used this...
# acc_n: 1.3414916806352631e-02         # accelerometer measurement noise standard deviation. #0.2   0.04
# gyr_n: 3.1272352813400007e-03        # gyroscope measurement noise standard deviation.     #0.05  0.004
# acc_w: 2.3513079032355371e-04         # accelerometer bias random work noise standard deviation.  #0.002
# gyr_w: 4.7867403773944395e-05  
# g_norm: 9.805       # gravity magnitude

#idc
acc_n: 1.2374091609523514e-02        # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 3.0032654435730201e-03       # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 1.9218003442176448e-04        # accelerometer bias random work noise standard deviation.  #0.002
gyr_w: 5.4692100664858005e-05 
g_norm: 9.805       # gravity magnitude

#loop closure parameters
loop_closure: 1                    # start loop closure
fast_relocalization: 1             # useful in real-time and large project
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/yinjie/Downloads/project/vinsmono_ws/src/VINS-Mono/posegraph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.000                           # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                      # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0.033               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
